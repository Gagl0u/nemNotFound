/* global exports */

var padRadix = require("./pad_radix.js");


/*
    Fonction pour passer un texte d'une base à une autre.

    text : le texte à convertir
    fromBase : base du texte
    toBase : base cible
*/

function changeBase (text, fromBase, toBase){
    var alphabet = "";
    var length;
    var newBase = "";

    if (fromBase == "b64u" && toBase == "b64c") {
        var tmp = text.replace(/\-/g, "+");
        newBase = tmp.replace(/\_/g, "/");
    }
    else if(fromBase == "b64c" && toBase == "b64u"){
        var tmp = text.replace(/\+/g, "-");
        newBase = tmp.replace(/\//g, "_");
    }
    else if (toBase !== fromBase) {
        switch (toBase) {
            case "b64x":
                alphabet = "Jl-xzGAyPa6k873f_eVC02LMKSbRETjBvrpIhu4YHmZUtdgWOc1wnoqi59FNXsQD";
                length = 64;
                break;
            case "b64u":
                alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
                length = 64;
                break;
            case "b64c":
                alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                length = 64;
                break;
            case "b62c":
                alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
                length = 62;

            case "b73x":
                alphabet = "W]qU6i)LpN7!jclRybn28QV-EsAwH0Z1OtK39rdfgJ(SzMeIa*ku,TCX5v{xFho}[PYmB_D4G";
                length = 73;
                break;
            default:
                alphabet = "Jl-xzGAyPa6k873f_eVC02LMKSbRETjBvrpIhu4YHmZUtdgWOc1wnoqi59FNXsQD";
                length = 64;
                break;
        }

        var alphabetOrigine = "";
        var lengthOrigine;
        var padCarac = alphabet.substring(0,1);

        switch (fromBase) {
            case "b64u":
                alphabetOrigine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
                lengthOrigine = 64;
                break;

            case "b64c":
                alphabetOrigine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                lengthOrigine = 64;
                break;
            case "b64x":
                alphabetOrigine = "Jl-xzGAyPa6k873f_eVC02LMKSbRETjBvrpIhu4YHmZUtdgWOc1wnoqi59FNXsQD";
                lengthOrigine = 64;
                break;

            case "b73x":
                alphabetOrigine = "W]qU6i)LpN7!jclRybn28QV-EsAwH0Z1OtK39rdfgJ(SzMeIa*ku,TCX5v{xFho}[PYmB_D4G";
                lengthOrigine = 73;
                break;

            case "b62c":
                alphabetOrigine = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
                lengthOrigine = 62;
                break;
                
            case "b16c":
                alphabetOrigine = "0123456789ABCDEF";
                lengthOrigine = 16;
                break;


            default:
                alphabetOrigine = "0123456789ABCDEF";
                lengthOrigine = 16;
        }

        var R = padRadix.Radix(lengthOrigine, alphabetOrigine);
        // var R = padRadix.Radix(64, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"); //output du aes
        if (length == 64 && text.length<2) { //ATTENTION 29 NORMALEMENT ICI TEST
            var T = R.from(text); //uid you want to convert into base 64x
            // var U = padRadix.Radix(length, alphabet); 
            var U = padRadix.Radix(64, alphabet);
            newBase = U.to(T);
        } else {
            var tab_16 = [];
            var depart = 0;
            var step = 2; //seul moyen car 2 char b16 = 2 char b73x et uid nombre pair 
            var fin = step; //plus dynamique comme ça
            var tmp;
            // var U = padRadix.Radix(73, alphabet);
            var U = padRadix.Radix(length, alphabet);
            for (var i = 0; depart < text.length; i++) {
                tmp = text.substring(depart, fin);
                var T = R.from(tmp);
/*                if (length >= lengthOrigine) {
                    tab_16[i] = U.to(T);    
                }else{
                    tab_16[i] = padRadix.pad(U.to(T), 2, padCarac);    
                };*/
                tab_16[i] = padRadix.pad(U.to(T), 2, padCarac);
                depart += step;
                fin += step;
            }
            for (var i = 0; i < tab_16.length; i++) {
                newBase += tab_16[i];
            }
            if (newBase.substring(newBase.length-2, newBase.length-1) == padCarac) {
                // console.log(newBase.substring(newBase.length-2, newBase.length-1));
                //à faire.
                newBase = newBase.substring(0,newBase.length-2) + newBase.substring(newBase.length-1, newBase.length);
                // console.log("newBase : " + newBase);
            };
        };
    }else{
        newBase = text;
    };
    return newBase;
};



/*
    Do not use, WIP
*/
exports.changeBaseFront = function (text, fromBase, toBase){
    return changeBase(text,fromBase, toBase);
};
